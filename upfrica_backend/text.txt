# settings.py

INSTALLED_APPS += ['storages']

# AWS settings
AWS_ACCESS_KEY_ID = 'your-access-key-id'
AWS_SECRET_ACCESS_KEY = 'your-secret-access-key'
AWS_STORAGE_BUCKET_NAME = 'your-bucket-name'
AWS_S3_REGION_NAME = 'your-region'  # e.g. 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f'dxxxxxxx.cloudfront.net'  # from your CloudFront distro

AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False  # Optional: to allow public access to files
AWS_S3_FILE_OVERWRITE = False  # To avoid filename collisions

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'



update view
from rest_framework.decorators import api_view, parser_classes
from rest_framework.parsers import MultiPartParser
from rest_framework.response import Response
from django.core.files.storage import default_storage
from django.utils.crypto import get_random_string

@api_view(['POST'])
@parser_classes([MultiPartParser])
def upload_image(request):
    image = request.FILES.get('image')
    if not image:
        return Response({"error": "No image provided"}, status=400)

    # Generate a unique path to avoid collisions
    file_ext = image.name.split('.')[-1]
    filename = f'uploads/help-center/{get_random_string(16)}.{file_ext}'

    path = default_storage.save(filename, image)
    image_url = f'{settings.MEDIA_URL}{path}'
    return Response({"url": image_url})